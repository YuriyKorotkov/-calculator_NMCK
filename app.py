import streamlit as st
import numpy as np
from streamlit_extras.metric_cards import style_metric_cards

st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–ú–¶–ö", layout="centered")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
if 'prices' not in st.session_state:
    st.session_state.prices = []
if 'price_input' not in st.session_state:
    st.session_state.price_input = ""

# --- –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ù–ú–¶–ö ---
def calculate_nmck(prices):
    n = len(prices)
    if n == 0:
        return None, None, None, "–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–Ω—É"

    mean_price = np.mean(prices)
    std_dev = np.std(prices, ddof=1)
    variation_coeff = (std_dev / mean_price) * 100 if mean_price != 0 else None

    return mean_price, std_dev, variation_coeff, None

# --- –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã ---
def add_price():
    try:
        price = float(st.session_state.price_input.replace(",", "."))
        if price >= 0.01:
            st.session_state.prices.append(price)
            st.session_state.price_input = ""
        else:
            st.warning("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 0.01")
    except ValueError:
        st.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

def custom_metric(label, value, unit=""):
    st.markdown(f"""
        <div style="background-color:#e0e0e0;padding:16px;border-radius:10px;margin-bottom:10px;">
            <div style="font-size:16px;color:#333;font-weight:600;">{label}</div>
            <div style="font-size:24px;color:#000;font-weight:700;">{value} {unit}</div>
        </div>
    """, unsafe_allow_html=True)

# --- –°—Ç–∏–ª–∏ CSS ---
st.markdown("""
    <style>
    .css-18e3th9 {
        background-color: #0b2545 !important;
        color: #ffffff !important;
    }
    .css-1d391kg {
        background-color: transparent !important;
    }
    div[data-testid="metric-container"] {
        background-color: #e0e0e0 !important;
        color: #111111 !important;
        border-radius: 8px;
        padding: 12px;
    }
    div[data-testid="metric-value"] {
        color: #111111 !important;
        font-weight: 700;
        opacity: 1 !important;
    }
    div[data-testid="metric-label"] {
        color: #333333 !important;
        font-weight: 600;
    }
    div[data-testid="metric-container"] svg {
        fill: #111111 !important;
    }
    .stButton>button {
        background-color: #4CAF50 !important;
        color: white !important;
        border-radius: 8px !important;
        height: 3em !important;
        width: 100% !important;
    }
    .stTextInput>div>input {
        border-radius: 8px !important;
        color: #111111 !important;
    }
    </style>
""", unsafe_allow_html=True)

# --- –ó–∞–≥–æ–ª–æ–≤–∫–∏ ---
st.title("üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–ú–¶–ö")
st.caption("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—á—ë—Ç—ã —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏")

# --- –í–≤–æ–¥ —Ü–µ–Ω—ã ---
st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", key="price_input")

# --- –ö–Ω–æ–ø–∫–∏ ---
col1, col2 = st.columns([1, 1])
with col1:
    st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–Ω—É", on_click=add_price)

with col2:
    if st.button("üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"):
        st.session_state.clear()
        st.rerun()  # ‚úÖ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ –æ—à–∏–±–æ–∫

# --- –ü–æ–∫–∞–∑ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Ü–µ–Ω ---
if st.session_state.get("prices"):  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
    st.subheader("üìå –í–≤–µ–¥–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã:")
    st.write(", ".join(f"{p:.2f}" for p in st.session_state.prices))

# --- –†–∞—Å—á–µ—Ç –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
if st.session_state.get("prices"):
    mean_price, std_dev, variation_coeff, _ = calculate_nmck(st.session_state.prices)
    st.divider()
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞")
    col1, col2, col3 = st.columns(3)
    with col1:
        custom_metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{mean_price:,.2f}", "‚ÇΩ")
    with col2:
        custom_metric("–°–ö–û", f"{std_dev:,.2f}")
    with col3:
        custom_metric("–ö–æ—ç—Ñ. –≤–∞—Ä–∏–∞—Ü–∏–∏", f"{variation_coeff:,.2f}", "%")

    if variation_coeff > 33:
        st.warning("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 33% ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—ã–±—Ä–æ—Å—ã.")
else:
    st.info("–î–æ–±–∞–≤—å—Ç–µ —Ü–µ–Ω—ã, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ù–ú–¶–ö.")
